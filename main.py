import os
import logging
from datetime import datetime, timedelta, timezone

import psycopg2
from psycopg2.extras import RealDictCursor

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")  # Railway Postgres plugin –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN")
if not DATABASE_URL:
    raise RuntimeError("–ù–µ —É–∫–∞–∑–∞–Ω DATABASE_URL (–ø–æ–¥–∫–ª—é—á–∏ PostgreSQL –Ω–∞ Railway)")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–æ–¥–∏–Ω –∫–æ–Ω–Ω–µ–∫—Ç –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å)
conn = psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)
conn.autocommit = True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã
def init_db():
    with conn.cursor() as cur:
        cur.execute("""
        CREATE TABLE IF NOT EXISTS expenses (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            amount NUMERIC(12,2) NOT NULL,
            category TEXT NOT NULL,
            created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
        );
        """)
    logger.info("–°—Ö–µ–º–∞ –ë–î –≥–æ—Ç–æ–≤–∞")

def parse_expense(text: str):
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "<—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>"
    parts = text.strip().split(maxsplit=2)
    if not parts:
        return None
    try:
        amount = float(parts[0].replace(",", "."))
    except ValueError:
        return None
    category = parts[1] if len(parts) > 1 else "–ø—Ä–æ—á–µ–µ"
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ—Ç–∏–π –∫—É—Å–æ–∫ ‚Äî –¥–æ–±–∞–≤–∏–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–µ–¥–∞ –∫–∞—Ñ–µ")
    if len(parts) == 3:
        category = f"{category} {parts[2]}"
    return amount, category.lower()

def get_period_bounds(period: str):
    now = datetime.now(timezone.utc)
    period = (period or "").lower()
    if period in ("day", "—Å–µ–≥–æ–¥–Ω—è", "–¥–µ–Ω—å"):
        start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        end = now
    elif period in ("week", "–Ω–µ–¥–µ–ª—è"):
        # ISO –Ω–µ–¥–µ–ª—è: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –Ω–∞—á–∞–ª–æ
        start_of_week = now - timedelta(days=(now.weekday()))
        start = start_of_week.replace(hour=0, minute=0, second=0, microsecond=0)
        end = now
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        end = now
    return start, end

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ üí∏\n\n"
        "–î–æ–±–∞–≤–ª—è–π —Ä–∞—Å—Ö–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 200 –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "–∏–ª–∏: 15 –∫–æ—Ñ–µ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü\n"
        "/stats –¥–µ–Ω—å ‚Äî –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/stats –Ω–µ–¥–µ–ª—è ‚Äî –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_text(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: '<—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>'\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Äî 200 –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "‚Äî 50 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/stats [–¥–µ–Ω—å|–Ω–µ–¥–µ–ª—è] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å"
    )

async def add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    parsed = parse_expense(msg)
    if not parsed:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '<—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>'. –ù–∞–ø—Ä–∏–º–µ—Ä: 150 –∫–æ—Ñ–µ")
        return
    amount, category = parsed
    user_id = update.effective_user.id

    with conn.cursor() as cur:
        cur.execute(
            "INSERT INTO expenses (user_id, amount, category) VALUES (%s, %s, %s)",
            (user_id, amount, category)
        )

    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {amount:.2f} ‚Äî {category}")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    period_arg = " ".join(context.args) if context.args else None
    start, end = get_period_bounds(period_arg)
    user_id = update.effective_user.id

    with conn.cursor() as cur:
        cur.execute(
            """
            SELECT category, SUM(amount)::numeric(12,2) AS total
            FROM expenses
            WHERE user_id = %s AND created_at >= %s AND created_at <= %s
            GROUP BY category
            ORDER BY total DESC;
            """,
            (user_id, start, end)
        )
        rows = cur.fetchall()

        cur.execute(
            """
            SELECT COALESCE(SUM(amount), 0)::numeric(12,2) AS grand_total
            FROM expenses
            WHERE user_id = %s AND created_at >= %s AND created_at <= %s;
            """,
            (user_id, start, end)
        )
        grand_total = cur.fetchone()["grand_total"]

    period_name = "–º–µ—Å—è—Ü"
    if period_arg and period_arg.lower() in ("day", "—Å–µ–≥–æ–¥–Ω—è", "–¥–µ–Ω—å"):
        period_name = "—Å–µ–≥–æ–¥–Ω—è"
    elif period_arg and period_arg.lower() in ("week", "–Ω–µ–¥–µ–ª—è"):
        period_name = "–Ω–µ–¥–µ–ª—è"

    if not rows:
        await update.message.reply_text(f"–ó–∞ –ø–µ—Ä–∏–æ–¥ ¬´{period_name}¬ª —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ—Ç.")
        return

    lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}:"]
    for r in rows:
        lines.append(f"- {r['category']}: {r['total']} —Ä—É–±.")
    lines.append(f"\n–ò—Ç–æ–≥–æ: {grand_total} —Ä—É–±.")
    await update.message.reply_text("\n".join(lines))

def main():
    init_db()

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)")
    app.run_polling()

if __name__ == "__main__":
    main()
